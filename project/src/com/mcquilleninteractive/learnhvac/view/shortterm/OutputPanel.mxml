<?xml version="1.0" encoding="utf-8"?>
<util:DragPanel xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:mx="library://ns.adobe.com/flex/mx"
	 xmlns:util="com.mcquilleninteractive.learnhvac.util.*"    
	 xmlns:controls="com.mcquilleninteractive.controls.*" 
	 backgroundColor="#CCCCCC" 
	 label="OutputArea" 
	 width="100%" 
	 height="100%"
	 creationComplete="onCreationComplete()"
	 title="OUTPUT PANEL"
	 >
		<fx:Script>
	
		<![CDATA[
			import com.mcquilleninteractive.learnhvac.event.UnitsEvent;
			import com.mcquilleninteractive.learnhvac.event.VisualizationEvent;
			import com.mcquilleninteractive.learnhvac.model.ApplicationModel;
			import com.mcquilleninteractive.learnhvac.model.ScenarioModel;
			import com.mcquilleninteractive.learnhvac.model.SystemNodeModel;
			import com.mcquilleninteractive.learnhvac.model.SystemVariable;
			import com.mcquilleninteractive.learnhvac.util.Logger;
			
			import flash.events.IEventDispatcher;
			
			import mx.binding.utils.BindingUtils;
			import mx.collections.ArrayCollection;
			import mx.collections.ListCollectionView;
			import mx.controls.Image;
			import mx.core.DragSource;
			import mx.events.DragEvent;
			import mx.events.ItemClickEvent;
			import mx.managers.DragManager;
            
            
			[Bindable]
			[Inject]
			public var scenarioModel:ScenarioModel

            
			public var outputVarsView:ListCollectionView //view of data in a system node ... filters for OUTPUT variables
			
		
			[Embed (source = '/assets/img/brick.png')]
 			[Bindable]
 			public var icoSysVar : Class;
			
			[Bindable]
			public var outputFilterModel : ArrayCollection;
			
			
			public function onCreationComplete():void
			{  						    	

				
		    	//setup dataproviders
				outputFilterModel = new ArrayCollection (scenarioModel.sysNodesAC.source);
				
				var len : Number = outputFilterModel.length;
				var newNode : SystemNodeModel = new SystemNodeModel();
				newNode.sysVarsArr = new ArrayCollection();
				
				for (var i:Number=0; i < len; i++) {
					var theNode : SystemNodeModel = outputFilterModel[i];
					newNode.sysVarsArr.addAll(theNode.sysVarsArr);
				}

				newNode.id="ALL";
				newNode.name="All";
				outputFilterModel.addItemAt(newNode,0);
				
				cboSysNode.dataProvider = outputFilterModel;
				
				buildOutputGrid()
				
				
			}
			
			public function buildOutputGrid():void
			{
				updateOutputValueView(0)
			}
			
			
			public function filterOutputGrid (item:Object):Boolean {
				return item.ioType=="OUTPUT" && item.viewType=="PUBLIC" && item.isFault == false
			}
			
			public function updateOutputValueView(newIndex:Number):void
			{
				//update dg to selectedIndex
				var sysVarsArr:ArrayCollection = outputFilterModel.getItemAt(newIndex).sysVarsArr
				Logger.debug("#OP: updateOutputValueView() sysVarsArr.length: " + sysVarsArr.length)
				outputVarsView = new ListCollectionView(sysVarsArr)
				outputVarsView.filterFunction = filterOutputGrid
				dgOutputVariables.dataProvider = outputVarsView
				outputVarsView.refresh()
				
			}
		
			[Mediate(event="VisualizationEvent.NAVIGATION_CHANGE_NODE")]
			public function onCurrNodeIndexChange(event:VisualizationEvent):void
			{ 
				//update the combo box
				var newIndex:Number = scenarioModel.currNodeIndex
				cboSysNode.selectedIndex = newIndex
				updateOutputValueView(newIndex)
			}
			
			public function comboNodeSelect(event:Event):void
			{
				var selectedIndex:Number = event.target.selectedIndex;
				updateOutputValueView(selectedIndex)		
			}
			
			public function onDragComplete(event:DragEvent):void
			{
				//do nothing.
			}
			
			
			public function onDrag(event:MouseEvent):void
			{
				try
				{
			 		// Get the drag initiator component from the event object.
               		var dragInitiator:DataGrid = event.currentTarget as DataGrid;
    
                	// Create a DragSource object.
                	var dragSource:DragSource = new DragSource();
    
    				var myArr:Array = [event.currentTarget.selectedItem]
    	
               	 	dragSource.addData(myArr, "items")
               	 	    
               	 	// Create a copy of the coin image to use as a drag proxy.
                	var dragProxy:Image = new Image();
                	dragProxy.source = icoSysVar
    
                	// Call the DragManager doDrag() method to start the drag. 
                	dragProxy.x = mouseX - 25
                	dragProxy.y = mouseY - 75
             		DragManager.doDrag(dragInitiator, dragSource, event, dragProxy, 0, 0, 1);
				}
				catch(e:Error)
				{
					Logger.error("onDrag() error: " + e.message, this)
				}
			}
			
			protected function formatForTwoDecimals(item:Object, column:DataGridColumn):String 
			{
				return fmtTwoDecimals.format(item.currValue);;
			}
			
			
					
		]]>
		
		
	</fx:Script>
	
	<fx:Declarations>
		
		<mx:NumberFormatter id="fmtTwoDecimals"
							rounding="nearest"
							precision="2"
							/>
	</fx:Declarations>

	
	<mx:VBox width="100%" height="100%" backgroundColor="0xFFFFFF">
		
		<mx:HBox paddingLeft="5" paddingTop="5">
		
			<mx:ComboBox id="cboSysNode"
						paddingLeft="5"
						labelField="name" 
						rowCount="9"
						change="comboNodeSelect(event)"/>	
		</mx:HBox>
		
		<mx:DataGrid id="dgOutputVariables"
					 width="100%"
					 height="100%"
  				  	 paddingTop="0"
  				  	 mouseDown="onDrag(event)"
  				  	 dragEnabled="true"
  				  	 dropEnabled="false"
	 				 dragComplete="onDragComplete(event)"
  				  	  >
			<mx:columns>
				<mx:DataGridColumn headerText="Name" dataField="displayName" />
				<mx:DataGridColumn headerText="Variable" dataField="name" width="120" />
				<mx:DataGridColumn 
					headerText="Value" 
					dataField="currValue" 
					width="100" 
					labelFunction="formatForTwoDecimals"
					/>
				<mx:DataGridColumn headerText="Units" dataField="units" width="50" />
			</mx:columns>	
		</mx:DataGrid>
		
	</mx:VBox>
	

</util:DragPanel>

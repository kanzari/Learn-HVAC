<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:mx="library://ns.adobe.com/flex/mx" 
	xmlns:util="com.mcquilleninteractive.learnhvac.util.*"
    width="100%"
    initialize="onInit()"
    creationComplete="onCC()"
 	>
	
	<fx:Script>
		<![CDATA[
			import com.mcquilleninteractive.learnhvac.event.LogoutEvent;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import com.mcquilleninteractive.learnhvac.event.CloseScenarioEvent;
			import com.mcquilleninteractive.learnhvac.model.ApplicationModel;
			import com.mcquilleninteractive.learnhvac.model.ScenarioModel;
			import air.net.URLMonitor;
			import mx.binding.utils.ChangeWatcher;
			import mx.containers.Panel;
			import mx.events.MenuEvent
			import com.mcquilleninteractive.learnhvac.util.Logger
			import mx.binding.utils.BindingUtils						
			
			import mx.core.Application;
			import mx.core.FlexGlobals;
			import mx.managers.PopUpManager;
			
			import com.mcquilleninteractive.learnhvac.view.popups.SettingsPanel;
			import com.mcquilleninteractive.learnhvac.view.popups.AboutPanel;
			
			import com.mcquilleninteractive.learnhvac.event.ShortTermSimulationEvent;
			import com.mcquilleninteractive.learnhvac.event.LongTermSimulationEvent;
			
			private var cwViewing:ChangeWatcher
			
			[Bindable]
			[Inject] 
			public var applicationModel:ApplicationModel
						
			private var settingsPopup:SettingsPanel
			private var aboutPopup:AboutPanel
			
			
			
			private function onInit():void
			{
            } 			
			private function onCC():void
			{
			}		
				
				
			private function menuHandler(event:MenuEvent):void
			{
								
				var cmd:String = event.item.data
				
				switch(cmd)
				{							
					
					/* COMFEN */ 	
						
					case "about":
						aboutPopup = AboutPanel(PopUpManager.createPopUp(this.parent, AboutPanel, true)); // popup modal dialog	
						PopUpManager.centerPopUp(aboutPopup)
						break
						
					case "quit":
						FlexGlobals.topLevelApplication.exit();
						break
						
					case "hide":
						FlexGlobals.topLevelApplication.minimize()
						break
						
					case "logout":
						onLogout()
						break
						
					case "settings":
						//show modal dialog for settings
						settingsPopup = SettingsPanel(PopUpManager.createPopUp(this.parent, SettingsPanel, true)); // popup modal dialog	
						PopUpManager.centerPopUp(settingsPopup)
						break
						
					
					/* File */ 
					
					/*
					case "new_scenario":
						var newEvt:NewScenarioEvent = new NewScenarioEvent(NewScenarioEvent.NEW_SCENARIO, true)
						dispatchEvent(newEvt)	
						break
					*/
					
					case "close_scenario":
						var closeEvt:CloseScenarioEvent = new CloseScenarioEvent(CloseScenarioEvent.CLOSE_SCENARIO, true)
						dispatchEvent(closeEvt)
						break
					
									
					/* HELP MENU */
					
					case "view_help_files":
						break								

					case "learn_hvac_website":
						var url:String = "http://learnhvac.org/"
						openHelpPage(url)
						break

					case "help_glossary":					
						break
					
					
						
					
					/* Analysis */
					
					
					
					default:
						Logger.error("#AppMenu: menuHandler() unrecognized command: " + cmd)
				
				}
				
				
			}
			
			
			private function openHelpPage(url:String):void
			{
				var request:URLRequest = new URLRequest(url)
				navigateToURL(request, "_blank")			
			}
					
			
			public function onLogout():void
			{
				Alert.show("Are you sure you want to log out?", "Logout", Alert.OK|Alert.CANCEL, null, onLogoutAlertListener)
			}
			
			
			public function onLogoutAlertListener(evt:CloseEvent):void
			{
				if (evt.detail == Alert.OK)
				{	
					
					var shortEvent:ShortTermSimulationEvent = new ShortTermSimulationEvent(ShortTermSimulationEvent.SIM_RETURN_TO_START, true)
					dispatchEvent(shortEvent)
					
					var longEvent:LongTermSimulationEvent = new LongTermSimulationEvent(LongTermSimulationEvent.SIM_CANCEL, true)
					dispatchEvent(longEvent)
					
					
					Logger.debug("#LogoutCommand: user confirmed intention to log out. Launching app event...")
					var event:LogoutEvent = new LogoutEvent(LogoutEvent.LOGOUT, true)
					dispatchEvent(event)
				}
				else
				{
					//do nothing
				}
			}
					
					
			
		]]>
	</fx:Script>
	
	
	<mx:MenuBar id="appMenu"
			    showRoot="false"
			    itemClick="menuHandler(event)"
			    width="100%" 
			    styleName="appMenu"
			    height="25">
		<util:MenuItem id="rootMenu">
		
		
			<util:MenuItem label="Learn HVAC" id="learnhvac">
				<util:MenuItem label="About Learn HVAC" id="about" data="about"/>
				<util:MenuItem type="separator"/>
				<util:MenuItem label="Settings" id="settings" data="settings" />
				<util:MenuItem type="separator"/>
				<util:MenuItem label="Hide Learn HVAC" id="hide" data="hide"/>
				<util:MenuItem type="separator"/>
				<util:MenuItem label="Logout" id="logout" data="logout"/>
				<util:MenuItem type="separator"/>
				<util:MenuItem label="Quit" id="quit" data="quit"/>
			</util:MenuItem>
		
			<util:MenuItem label="Scenario" id="scenario">
				<util:MenuItem label="Close scenario" 
					id="close_project" 
					data="close_scenario" 
					enabled="{applicationModel.scenarioLoaded}"/>
			</util:MenuItem>
		
			
			
			<util:MenuItem label="Help" id="help">
				<util:MenuItem label="Help contents" id="view_help_files" data="view_help_files"/>
				<util:MenuItem label="LearnVHAC website" id="learn_hvac_website" data="learn_hvac_website"/>
				<util:MenuItem label="Glossary" id="help_glossary" data="help_glossary"/>
				
			</util:MenuItem>   
		</util:MenuItem>
	</mx:MenuBar>
	
</mx:Canvas>

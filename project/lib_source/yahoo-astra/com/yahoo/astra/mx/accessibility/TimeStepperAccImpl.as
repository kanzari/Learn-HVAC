/*
Copyright (c) 2009 Yahoo! Inc.  All rights reserved.  
The copyrights embodied in the content of this file are licensed under the BSD (revised) open source license
*/
ï»¿package com.yahoo.astra.mx.accessibility {	import com.yahoo.astra.accessibility.EventTypes;	import com.yahoo.astra.accessibility.ObjectRoles;	import com.yahoo.astra.accessibility.ObjectStates;	import com.yahoo.astra.mx.controls.TimeStepper;		import flash.accessibility.Accessibility;	import flash.events.Event;		import mx.accessibility.AccImpl;	import mx.core.UIComponent;		/**	 * The TimeStepperAccImpl class is used to make a TimeStepper component accessible.	 * 	 * <p>The TimeStepperAccImpl class supports system roles, object-based events, and states.</p>	 * 	 * <p>A TimeStepper reports the role <code>ROLE_SYSTEM_TEXT</code> to a screen 	 * reader. </p>	 *      * @author Alaric Cole	 */	public class TimeStepperAccImpl extends AccImpl 	{	        /**         * @private         * Static variable triggering the <code>hookAccessibility()</code> method.         * This is used for initializing TimeStepperAccImpl class to hook its         * <code>createAccessibilityImplementation()</code> method to TimeStepper class          * before it gets called from UIComponent.         */		private static var accessibilityHooked:Boolean = hookAccessibility();        /**         * @private         * Static method for swapping the <code>createAccessibilityImplementation()</code>         * method of TimeStepper with the TimeStepperAccImpl class.         *         */		private static function hookAccessibility():Boolean 		{			TimeStepper.createAccessibilityImplementation = createAccessibilityImplementation;						return true;		}			/**		 *  Method for creating the Accessibility class.         *  This method is called from UIComponent.         */		public static function createAccessibilityImplementation(component:UIComponent):void 		{			component.accessibilityImplementation = new TimeStepperAccImpl(component);			var timeInputAccImpl:TimeInputAccImpl = new TimeInputAccImpl(component);			var timeStepperComponent:TimeStepper = component as TimeStepper;						timeStepperComponent.timeInput.accessibilityImplementation = timeInputAccImpl;		}			/**		 *  Enables accessibility for a TimeStepper component.		 *  This method is required for the compiler to activate         *  the accessibility classes for a component.         */		public static function enableAccessibility():void 		{			//		}				//--------------------------------------------------------------------------		//  Constructor		//--------------------------------------------------------------------------	        /**         *  Creates a new TimeStepper Accessibility Implementation.		 *		 *  @param master The UIComponent instance that this AccImpl instance         *  is making accessible.         *         */		public function TimeStepperAccImpl(master:UIComponent) 		{			super(master);			role = ObjectRoles.ROLE_SYSTEM_TEXT;		}				/**		 *  @inheritDoc.         *         */		 override protected function get eventsToHandle():Array 		 {			return super.eventsToHandle.concat([ "change" ]);		 } 		/**		 *  @inheritDoc		 *  		 */		override public function get_accRole(childID:uint):uint 		{						return role;		}			/**		 *  @inheritDoc		 */		override public function get_accValue(childID:uint):String 		{			if (childID == 0) 			{				return TimeStepper(master).text;			}			return null;		}			/**		 *  @inheritDoc		 */		override public function get_accState(childID:uint):uint {			var accState:uint = getState(childID);			accState |= ObjectStates.STATE_SYSTEM_SELECTABLE;			accState |= ObjectStates.STATE_SYSTEM_SELECTED | ObjectStates.STATE_SYSTEM_FOCUSED;						return accState;		}			/**		 *  @inheritDoc		 */		override public function getChildIDArray():Array 		{			var childIDs:Array = [];						return childIDs;		}				/**		 *  @inheritDoc		 */		override protected function getName(childID:uint):String 		{			var name:String = "Time Stepper";								return name + " " + (super.getName(childID) != null?super.getName(childID):"") + 				get_accValue(childID);		}				/**		 *  @inheritDoc		 */		override protected function eventHandler(event:Event):void 		{			  switch (event.type) 			  {				case "change":										if(Accessibility.active) 					{						Accessibility.sendEvent(master, 0,											EventTypes.EVENT_OBJECT_FOCUS);						Accessibility.sendEvent(master, 0, EventTypes.EVENT_OBJECT_SELECTION);						Accessibility.sendEvent(master, 0, EventTypes.EVENT_OBJECT_VALUECHANGE);										}										break;				case "valueCommit":					if(Accessibility.active) 					{						Accessibility.sendEvent(master, 0, EventTypes.EVENT_OBJECT_VALUECHANGE);					}					break;			}  		}	}}
package {		import mx.flash.UIMovieClip	import flash.geom.ColorTransform	import com.mcquilleninteractive.learnhvac.util.ColorSetting		import flash.display.MovieClip;	public class PipeLiquids extends UIMovieClip	{				public var pipeArr:Array				public var mcPipe1:MovieClip		public var mcPipe2:MovieClip		public var mcPipe3:MovieClip		public var mcPipe4:MovieClip						public var flowRateConst:Number =  1.8 //used to compute animation for liquid from system variable value		protected var _disabled:Boolean = false								public function PipeLiquids():void		{								pipeArr = []			pipeArr[0] = mcPipe1			pipeArr[1] = mcPipe2			//pipeArr[2] = mcFlow_BYPASS			pipeArr[2] = mcPipe3			pipeArr[3] = mcPipe4					}						public function set disabled (state:Boolean)		{			_disabled = state			if (_disabled)			{				//when disabled, turn off pipes so they're not cycling 				turnAllPipesOff()			}		}				public function get disabled():Boolean		{			return _disabled		}				public function turnAllPipesOff()		{			try			{				for (var i:Number=0; i<pipeArr.length; i++)				{					pipeArr[i].setFlow(0)					pipeArr[i].mcLiqBase.transform.colorTransform = new ColorTransform(1,1,1,1,0,0,0,0)				}			}			catch(error:Error)			{				//do nothing			}		}											public function setTemp(temp:Number, pipeNum:Number):void		{			if (isNaN(temp)) return			if (isNaN(pipeNum)) return			if (pipeArr==null || pipeArr[0]==null) return			try			{								if (_disabled) return								//error check				if (pipeNum<0 || pipeNum > 4)				{					return				}				// create color transform objects (using helper function below)				// var ct:ColorTransform = getLiqTransform(temp)				// Use static class ColorSetting for color. PipeLiquids always gets passed				// "SI" values from the flex app, so just hard-code the units when asking 				// for a colorTransform				var ct:ColorTransform = ColorSetting.getTemperatureColor(temp, "SI")								//change colors with new transforms				pipeArr[pipeNum].mcLiqBase.transform.colorTransform = ct			}			catch(error:Error)			{				//do nothing			}		}							public function setFlow(flowRate:Number, pipeNum:Number):void		{					if (_disabled) return						try			{				if (flowRate>0 && flowRate <.5) flowRate = .5 //anything below looks chunky				if (flowRate>10) flowRate = 10 //anything above 10 makes the animation go crazy								var fRate:Number = 0 //special value that tells animation how fast to run								//error check				if (pipeNum<0 || pipeNum > 4)				{					return				}											//computer animation flow rate				if (flowRate > 0)				{					fRate = flowRateConst/flowRate				} 				else 				{					fRate = 0				}								if (pipeArr[pipeNum])				{					pipeArr[pipeNum].setFlow(fRate)				}			}			catch(error:Error)			{				//do nothing			}		}										}}
<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:mx="library://ns.adobe.com/flex/mx"
	xmlns:controls="com.mcquilleninteractive.controls.*"
	label="PROPERTIES"  	
	implements="com.mcquilleninteractive.learnhvac.view.longterm.ILongTermOptionsPanel"
	creationComplete="onCC()"
	paddingTop="10"
	paddingLeft="10"
	paddingRight="10"
	width="100%" height="100%"

	>
	
	<fx:Metadata>
		[Event(name="buildingPropsChange", type="flash.events.Event")]
	</fx:Metadata>
	
		<fx:Script>
		<![CDATA[

			import com.mcquilleninteractive.learnhvac.event.UnitsEvent;
			import com.mcquilleninteractive.learnhvac.model.ApplicationModel;
			import com.mcquilleninteractive.learnhvac.model.LongTermSimulationModel;
			import com.mcquilleninteractive.learnhvac.model.ScenarioModel;
			import com.mcquilleninteractive.learnhvac.util.Conversions;
			import com.mcquilleninteractive.learnhvac.util.Logger;
			import com.mcquilleninteractive.learnhvac.view.LongTermSimulation;
			import com.mcquilleninteractive.learnhvac.vo.LongTermSimulationVO;
			import com.mcquilleninteractive.learnhvac.event.ScenarioLoadedEvent;
			
			import flash.events.Event;
			
			import mx.events.ItemClickEvent;
			import mx.events.SliderEvent;
			import mx.validators.Validator;
			
			[Bindable]
			public var scenarioModel:ScenarioModel
		
			[Inject]
			public function setScenarioModel( scenarioModel:ScenarioModel ):void
			{
				if (scenarioModel !== null) { 
					this.scenarioModel = scenarioModel;
				} else {
					Logger.debug("Injecting scenarioModel as Null", this);
				}
			}
			
			
			[Bindable]
			public var longTermSimulationModel:LongTermSimulationModel
			
			
			[Inject]
			public function setLongTermSimulationModel( longTermSimulationModel:LongTermSimulationModel ):void
			{
				if (longTermSimulationModel !== null) { 
					this.longTermSimulationModel = longTermSimulationModel;
				} else {
					Logger.debug("Injecting longTermSimulationModel as Null", this);
				}
			}
			
			
			
			
			private var _validatorsArr:Array
									
			[Embed(source='/assets/DawaAssets.swf', symbol='mcSliderDragger')]
			[Bindable]
			private var SliderDragger:Class;
								
			private var _currElevationView:String = LongTermSimulationModel.SOUTH
			
			public var _errorMsg:String
			public var _errorMsgArr:Array = []
						
			private var _elevationView:ElevationView
			private var _zoneSelector:ZoneSelector
			
			protected function onCC():void
			{
				_validatorsArr = [vldNorthAxis]				
				_errorMsgArr["txtNorthAxis"] = "North Axis"		
			}	
			
			
			
			[Mediate(event="ScenarioLoadedEvent.SCENARIO_LOADED")]
			public function onScenarioLoaded(event:ScenarioLoadedEvent):void
			{								
				cboMassLevel.dataProvider = longTermSimulationModel.massLevelsAC
				cboMassLevel.selectedIndex = longTermSimulationModel.massLevelSelectedIndex
				cboWindowType.dataProvider = longTermSimulationModel.windowTypesAC
				cboWindowType.selectedIndex = longTermSimulationModel.windowTypeSelectedIndex
				
				drawFloors()
				resetValues()	
			}
			
			public function setElevationView(view:String):void
			{
				_currElevationView = view
				drawFloors()
			}
			
			
						
			public function unitsUpdate():void
			{
				
				resetValues()	
			}
			
			public function setViewRefs(elevationView:ElevationView, zoneSelector:ZoneSelector):void
			{
				_elevationView = elevationView
				_zoneSelector = zoneSelector
					
				//set initial size and position
				_zoneSelector.drawZones( longTermSimulationModel.buildingLength, longTermSimulationModel.buildingWidth, longTermSimulationModel.northAxis, 0)		
					
					
			}
			
			public function initializeValues():void
			{			
			}
			
			
			
			public function get errorMsg():String
			{
				return _errorMsg
			}
			
				
			public function resetValues():void
			{
				var currUnits:String = ApplicationModel.currUnits
					
				if (txtBldgLength)
				{
					txtBldgLength.text = numFormatter.format(longTermSimulationModel.buildingLength).toString()				
				}
				if (txtBldgWidth)
				{
					txtBldgWidth.text = numFormatter.format(longTermSimulationModel.buildingWidth).toString()					
				}
				if (txtStoryHeight)
				{
					txtStoryHeight.text = numFormatter.format(longTermSimulationModel.storyHeight).toString()				
				}
				
				
				//initialize sliders				
				if (currUnits =="SI")
				{										
/*  					sldStoryHeight.minimum = 2.5
					sldStoryHeight.maximum = 6.0  */
					lblStoryHeightLeftLabel.text = "2.5"
					lblStoryHeightRightLabel.text = "6.0"
										
/* 					sldBldgLength.minimum = 10
					sldBldgLength.maximum = 100 */
					lblBldgLengthLeftLabel.text = "10"
					lblBldgLengthRightLabel.text = "100"
					
/* 					sldBldgWidth.minimum = 10
					sldBldgWidth.maximum = 100 */
					lblBldgWidthLeftLabel.text = "10"
					lblBldgWidthRightLabel.text = "100"
					
					lblStoryHeightUnits.text = "m."
					lblBldgLengthUnits.text = "m."
					lblBldgWidthUnits.text = "m."
				
				}
				else
				{
					
/* 					sldStoryHeight.minimum = 8
					sldStoryHeight.maximum = 20 */
					lblStoryHeightLeftLabel.text = "8'"
					lblStoryHeightRightLabel.text = "20'"
										
/* 					sldBldgLength.minimum = 50
					sldBldgLength.maximum = 300 */
					lblBldgLengthLeftLabel.text = "50'"
					lblBldgLengthRightLabel.text = "300'"
					
/* 					sldBldgWidth.minimum = 50
					sldBldgWidth.maximum = 300 */
					lblBldgWidthLeftLabel.text = "50'"
					lblBldgWidthRightLabel.text = "300'"
										
					lblStoryHeightUnits.text = "ft."
					lblBldgLengthUnits.text = "ft."
					lblBldgWidthUnits.text = "ft."
				}				
				
/* 				sldStoryHeight.invalidateProperties()
				sldBldgWidth.invalidateProperties()
				sldBldgLength.invalidateProperties() */
			
			}
			
			
			public function isValid():Boolean
			{
				var results:Array = Validator.validateAll(_validatorsArr)
				if (results.length>0){
					var _errorMsg:String = "Some of the values you've entered are incorrect. Please check the following fields:\n"
					for (var i:uint=0; i<results.length; i++)
					{
						var s:String = _errorMsgArr[results[i].target.source.id] 
						_errorMsg = _errorMsg + "\n" + s
					}
					return false
				}			
				return true
			}
			
						
					
			public function axisChange(event:Event):void
			{
				var val:Number = Number(txtNorthAxis.text)
				if (val<-45)
				{
					 val = -45
					 txtNorthAxis.text = "-45"		
				}
				else if (val>45) 
				{
					val = 45
					txtNorthAxis.text = "45"
				}
				longTermSimulationModel.northAxis = Number(txtNorthAxis.text)
				_zoneSelector.northAxis = longTermSimulationModel.northAxis
			}
		
			protected function drawFloors():void
			{
				//var w:uint = longTermSimulationModel.getWidthForElevation(_currElevationView,'IP')
				//var storyHeight:Number = longTermSimulationModel.storyHeight
				var w:uint = 100
				var storyHeight:int = 12				
				var stories:Number = longTermSimulationModel.stories
				var winRatio:Number = longTermSimulationModel.getWindowRatioForElevation(_currElevationView)
				var winType:String = longTermSimulationModel.windowType
				_elevationView.drawFloors(w, stories, storyHeight, winRatio, winType)
			}
		
			

			
			
			private function sliderChangeNorth(event:flash.events.Event):void
			{
				
				var val:Number = event.target.value;
				longTermSimulationModel.windowRatioNorth = event.target.value;
					
				if (_currElevationView == LongTermSimulationModel.NORTH) {
					_elevationView.setWindowRatio(val);
				}
				
				dispatchEvent(new Event("buildingPropsChange"));
				
			}
			
			
			
			private function sliderChangeSouth(event:flash.events.Event):void
			{
				
				var val:Number = event.target.value;
				longTermSimulationModel.windowRatioSouth = event.target.value;
					
				if (_currElevationView == LongTermSimulationModel.SOUTH) {
					_elevationView.setWindowRatio(val);
				}
				
				dispatchEvent(new Event("buildingPropsChange"));
				
			}
			private function sliderChangeEast(event:flash.events.Event):void
			{
				
				var val:Number = event.target.value;
				longTermSimulationModel.windowRatioEast = event.target.value;
					
				if (_currElevationView == LongTermSimulationModel.EAST) {
					_elevationView.setWindowRatio(val);
				}
				
				dispatchEvent(new Event("buildingPropsChange"));
				
			}
			
			
			private function sliderChangeWest(event:flash.events.Event):void
			{
				
				var val:Number = event.target.value;
				longTermSimulationModel.windowRatioWest = event.target.value;
					
				if (_currElevationView == LongTermSimulationModel.WEST) {
					_elevationView.setWindowRatio(val);
				}
				
				dispatchEvent(new Event("buildingPropsChange"));
			}
			
			
			
			public function onWindowTypeChange():void
			{				
				longTermSimulationModel.windowTypeSelectedIndex = cboWindowType.selectedIndex
				longTermSimulationModel.windowType = cboWindowType.selectedItem.data					
				_elevationView.setWindowStyle(cboWindowType.selectedItem.data)	
				this.drawFloors()
			}
						
			private function formatStoriesDataTip(val:Number):String
			{
				var displayVal:String = String(Math.round(val))
				return displayVal
			}		
			private function formatStoryHeightDataTip(val:Number):String
			{
				var displayVal:String = String(Math.round(val*10)/10)
				return displayVal
			}			
			private function formatBldgLengthDataTip(val:Number):String
			{
				var displayVal:String = String(Math.round(val))
				return displayVal
			}		
			private function formatBldgWidthDataTip(val:Number):String
			{
				var displayVal:String = String(Math.round(val))
				return displayVal
			}	
			
			private function onMassLevelChange():void
			{
				longTermSimulationModel.massLevelSelectedIndex = cboMassLevel.selectedIndex
			}
			
			private function onBuildingAgeChange():void
			{
				//TODO: Add building age property
			}
			
			public function outFocusHandler(event:Event):void
			{
				Logger.debug("outFocusHandler()",this)
				
			//	data.localValue = Number(txtCurrFaultValue.text)
			//	_isDirty = (data.localValue != data.currValue) 				
			}
			
			
		]]>
	</fx:Script>

	<fx:Declarations>
		<mx:NumberValidator id="vldNorthAxis" 
			source="{txtNorthAxis}"
			property="text"
			minValue="-360" 
			maxValue="360"/>
			
	    <mx:NumberFormatter id="numFormatter"
	            precision="2"
	            rounding="nearest" />

	</fx:Declarations>
	
   	<mx:Text width="350"  text="If the instructor has disabled the building properties in this scenario, you will not be able to change them."/>
   	
   	
	<mx:Label text="Building Dimensions" styleName="longTermOptionsSectionHeader"/>
   	
	<mx:HBox>
		
		<mx:Label id="lblStories" text="Stories:" width="100" styleName="longTermOptionsLabel"/>
		<mx:Label
				id="txtStories"
				text="{numFormatter.format(longTermSimulationModel.stories)}"
				width="55"
				styleName="longTermOptionsCurrValue" 
				textAlign="right"
				height="20"
				/>						
		
		<mx:Spacer width="25"/>
		
		<mx:Label text="3" width="25"  textAlign="right" 
				  visible="false" />
<!--		<mx:HSlider 
				id="sldStories"
				dataTipOffset="2"
				labelStyleName="sliderLable"
				snapInterval="1"
				dataTipFormatFunction="formatStoriesDataTip"
				change="sliderChange(event)"
				width="130"
				height="25" 
				minimum="3"
				maximum="30"
				visible="false"
				value="{longTermSimulationModel.stories}"
				thumbDownSkin="{SliderDragger}" 
				thumbOverSkin="{SliderDragger}"
				thumbUpSkin="{SliderDragger}"
				thumbDisabledSkin="@Embed('/assets/DawaAssets.swf', symbol='mcSliderDraggerDisabled')"
				
				/>		-->
		<mx:Label text="30" width="40"
				  visible="false" />
		
			
	</mx:HBox>
	
	
	
	<mx:HBox>
		<mx:Label id="lblStoryHeight" text="Story Height:" width="100" styleName="longTermOptionsLabel"/>
		<mx:Label
			    id="txtStoryHeight"							
				text="{numFormatter.format(longTermSimulationModel.storyHeight)}"
				width="55"
				styleName="longTermOptionsCurrValue" 
				textAlign="right"
				height="20"
				paddingRight="0"/>
		<mx:Label id="lblStoryHeightUnits" paddingLeft="0" text="ft." width="20"/>
		<mx:Label id="lblStoryHeightLeftLabel" text="8'" width="25" textAlign="right" 
				  visible="false"/>
<!--		<mx:HSlider 
				id="sldStoryHeight"									
				value="{longTermSimulationModel.storyHeight}"
				dataTipOffset="2"
				snapInterval=".1"
				dataTipFormatFunction="formatStoryHeightDataTip"
				change="sliderChange(event)"
				width="130"
				height="25" 
				minimum="8.5"
				maximum="20"
				visible="false"
				thumbDownSkin="{SliderDragger}" 
				thumbOverSkin="{SliderDragger}"
				thumbUpSkin="{SliderDragger}"
				thumbDisabledSkin="@Embed('/assets/DawaAssets.swf', symbol='mcSliderDraggerDisabled')"
				/>	-->
		<mx:Label text="50'" width="40" id="lblStoryHeightRightLabel" 
				  visible="false"/>	
		
	</mx:HBox>
						
					
					
	<mx:HBox>
		<mx:Label id="lblWidth" text="Bldg. Width:" width="100" styleName="longTermOptionsLabel"/>
		<mx:Label
			    id="txtBldgWidth"
				width="55" 
				styleName="longTermOptionsCurrValue" 
				text="{numFormatter.format(longTermSimulationModel.buildingWidth)}" 
				textAlign="right"
				height="20"/>
		<mx:Label id="lblBldgWidthUnits" paddingLeft="0" text="ft." width="20"/>
		<mx:Label id="lblBldgWidthLeftLabel" text="50'" width="25" textAlign="right"
				  visible="false"/>
<!--		<mx:HSlider 
			id="sldBldgWidth"
				dataTipOffset="2"
				dataTipFormatFunction="formatBldgWidthDataTip"
				change="sliderChange(event)"
				snapInterval="5"
				width="130"
				height="25"
				value="{longTermSimulationModel.buildingWidth}" 
				minimum="50"
				maximum="300"
				visible="false"
				thumbDownSkin="{SliderDragger}" 
				thumbOverSkin="{SliderDragger}"
				thumbUpSkin="{SliderDragger}"
				thumbDisabledSkin="@Embed('/assets/DawaAssets.swf', symbol='mcSliderDraggerDisabled')"
				/>	-->
		<mx:Label id="lblBldgWidthRightLabel"  text="300'"  width="40"  
				  visible="false"/>
		
									
	</mx:HBox>
	
	
	
	<mx:HBox>
		<mx:Label id="lblLength" text="Bldg. Length:" width="100" styleName="longTermOptionsLabel"/>
		<mx:Label
			    id="txtBldgLength"
				width="55"
				styleName="longTermOptionsCurrValue" 
				text="{numFormatter.format(longTermSimulationModel.buildingLength)}" 
				textAlign="right"
				height="20"/>
		
		<mx:Label id="lblBldgLengthUnits" paddingLeft="0" text="ft." width="20"/>
		
		<mx:Label id="lblBldgLengthLeftLabel"  text="50'" width="25" textAlign="right"
				  visible="false" />
		
<!--		<mx:HSlider
				id="sldBldgLength"
				dataTipOffset="2"
				dataTipFormatFunction="formatBldgLengthDataTip"
				change="sliderChange(event)"
				snapInterval="5"
				width="130"
				height="25" 
				value="{longTermSimulationModel.buildingLength}" 
				minimum="50"
				maximum="300"
				thumbDownSkin="{SliderDragger}" 
				thumbOverSkin="{SliderDragger}"
				thumbUpSkin="{SliderDragger}"
				thumbDisabledSkin="@Embed('/assets/DawaAssets.swf', symbol='mcSliderDraggerDisabled')"
				visible="false"/>-->
		
		<mx:Label id="lblBldgLengthRightLabel" text="300'" width="40"
				  visible="false" />					
		
	</mx:HBox>
						
	
	
	<mx:Label text="Windows" styleName="longTermOptionsSectionHeader"/>
		
	<mx:HBox> 
		<mx:Label id="lblWindowType" text="Type:" width="100" styleName="longTermOptionsLabel"/>
		<mx:ComboBox id="cboWindowType" change="onWindowTypeChange()"  />
	</mx:HBox>
	
	<mx:Label text="Window-to-Wall ratio" styleName="longTermOptionsSectionHeader"/>
				
	<controls:SliderEx id="sldExNorth" 
					   title="North" 
					   value="{longTermSimulationModel.windowRatioNorth}" 
					   change="sliderChangeNorth(event)" >
	</controls:SliderEx>
	
	<controls:SliderEx id="sldExSouth" title="South" 
					   value="{longTermSimulationModel.windowRatioSouth}" 
					   change="sliderChangeSouth(event)" >
	</controls:SliderEx>
	
	<controls:SliderEx id="sldExEast" title="East" 
					   value="{longTermSimulationModel.windowRatioEast}"
					   change="sliderChangeEast(event)" >
	</controls:SliderEx>
	
	<controls:SliderEx id="sldExWest" title="West" 
					   value="{longTermSimulationModel.windowRatioWest}" 
					   change="sliderChangeWest(event)" >
	</controls:SliderEx>
	
	
				
	<mx:Label text="Orientation" styleName="longTermOptionsSectionHeader"/>
	
	<mx:HBox  >
		<mx:Label id="lblNorthAxis" text="North Axis:" width="100" styleName="longTermOptionsLabel"/>
		<mx:TextInput id="txtNorthAxis" text="0" width="70" enter="axisChange(event)"  focusOut="axisChange(event)" enabled="true"  />
	</mx:HBox>
	
	<mx:Label text="Other properties" styleName="longTermOptionsSectionHeader" visible="false"/>
	
	
	<mx:HBox visible="false">
		<mx:Label id="lblBuildingAge" text="Building Age" width="100" styleName="longTermOptionsLabel"/>
		<mx:Label text="New"/>		
		<mx:ComboBox id="cboBuildingAge" change="onBuildingAgeChange()">
			<mx:ArrayCollection>
				<fx:Object label="old" data="old"/>
				<fx:Object label="recent" data="recent"/>
				<fx:Object label="new" data="new"/>
			</mx:ArrayCollection>
		</mx:ComboBox>	
		
	</mx:HBox>
	
	<mx:HBox visible="false">
		<mx:Label id="lblMassLevel" text="Mass level:" width="100" styleName="longTermOptionsLabel"/>
		<mx:ComboBox id="cboMassLevel" change="onMassLevelChange()"/>		
	</mx:HBox>
	
				
</mx:VBox>
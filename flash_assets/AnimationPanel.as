package {	import flash.events.Event    import flash.display.MovieClip	import mx.flash.UIMovieClip			[Event(name="transitionFinished", type="flash.events.Event")]	[Event(name="introAnimationStarted", type="flash.events.Event")]	[Event(name="introAnimationFinished", type="flash.events.Event")]   	public dynamic class AnimationPanel extends UIMovieClip	{				public static const EVENT_TRANSITION_FINISHED:String = "transitionFinished"		public static const EVENT_INTRO_ANIMATION_STARTED:String = "introAnimationStarted"		public static const EVENT_INTRO_ANIMATION_FINISHED:String = "introAnimationFinished"						public var animHC:MovieClip				public var animCC:MovieClip				public var animDIF:MovieClip		public var animMX:MovieClip		public var animVAV:MovieClip		public var animFLT:MovieClip		public var animFAN:MovieClip		public var animRF:MovieClip		public var animSYS:MovieClip		public var animPLT:MovieClip		public var animCTW:MovieClip		public var animBOI:MovieClip		public var animCHL:MovieClip				public var SN_HC:String = "HC" 					public var SN_CC:String = "CC"					public var SN_FAN:String = "FAN"				public var SN_FILTER:String = "FLT"				public var SN_VAV:String = "VAV"		public var SN_MIXINGBOX:String = "MX"		public var SN_DIFFUSER:String = "DIF"		public var SN_BOI:String = "BOI"		public var SN_CHL:String = "CHL"		public var SN_CTW:String = "CTW"		public var SN_ROOF:String = "RF"		public var SN_SYSTEM:String = "SYS"		public var SN_PLT:String = "PLT"		public var fromSysNode:String = SN_ROOF		public var currSysNode:String = SN_ROOF		public var sysNodes:Array  =  new Array()				public function AnimationPanel()		{			trace("#AnimationPanel()")			init()		}						public function init():void		{			trace("#(FlashComponent)AnimationPanel: init()")			sysNodes[SN_HC] = animHC			sysNodes[SN_CC] = animCC			sysNodes[SN_DIFFUSER] = animDIF			sysNodes[SN_MIXINGBOX] = animMX			sysNodes[SN_VAV] = animVAV			sysNodes[SN_FAN] = animFAN			sysNodes[SN_FILTER] = animFLT			sysNodes[SN_BOI] = animBOI			sysNodes[SN_CHL] = animCHL			sysNodes[SN_CTW] = animCTW			sysNodes[SN_ROOF] = animRF			sysNodes[SN_SYSTEM] = animSYS			sysNodes[SN_PLT] = animPLT		}		public function playIntroAnim():void		{				trace("#(FlashComponent)AnimationPanel: playIntroAnim()")			gotoAndPlay(30);		}							public function hideAll():void		{			for (var i:String in sysNodes)			{				sysNodes[i].visible = false			}		}			public function hideAllExceptCurrent():void		{				trace("#(FlashComponent)AnimationPanel: hideAllExceptCurrent sysNodes["+SN_HC+"]: " + animHC)			for (var i:String in sysNodes)			{				if (i!=currSysNode){					sysNodes[i].visible = false				}			}		}				public function navigateTo(sysNode:String):void		{			if (sysNodes[SN_HC]==null) init()			trace("#(FlashComponent)AnimationPanel: navigateTo(" + sysNode +")")			if (sysNode == currSysNode) return;			//make sure only current node is showing			hideAllExceptCurrent()			var frameTarget:String = "*-" +sysNode+":start";			gotoAndPlay(frameTarget);		}		public function introAnimationStarted():void		{			trace("#(FlashComponent)AnimationPanel: introAnimationStarted()")			dispatchEvent(new Event(EVENT_INTRO_ANIMATION_STARTED))		}				public function introAnimationFinished():void		{			trace("#(FlashComponent)AnimationPanel: introAnimationFinished()")			dispatchEvent(new Event(EVENT_INTRO_ANIMATION_FINISHED))		}		public function transitionFinished():void		{			trace("#(FlashComponent)AnimationPanel: transitionFinished()")			dispatchEvent(new Event(EVENT_TRANSITION_FINISHED))		}											}}